# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Elevator.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from Dispatcher import Dispatcher

WALL_NUMS=6  # 墙数
ELEV_NUMS=5  # 电梯数
LEVEL_NUMS=20  # 楼层数

OPEN_DOOR=0  # 开门
CLOSE_DOOR=1  # 关门
DOOR_OPENED=1  # 门在开着
DOOR_CLOSED=0  # 门在关着

# 乘客选择状态
GO_UP=0
GO_DOWN=1

# 警报状态
USABLE=1  # 电梯可用
DISABLE=0  # 电梯损坏

class Ui_Window(object):
    def __init__(self):
        # 绑定控制器，Dispathcer类见Dispatcher文件
        self._ctrl = Dispatcher(self)

        self.walls = []  # 墙

        self.inLevelButtons = []  # 放置电梯内部的楼层按钮

        self.openButtons = []  # 每个电梯内部开门按钮
        self.closeButtons = []  # 每个电梯内部关门按钮

        self.levelCmdButtons = []  # 放置每层楼外部上下行按钮，先上行后下行，索引从0开始
        self.levelCmdLabels = []  # 放置楼层标签

        self.warnButtons = []  # 放置电梯内部警报按钮

        self.screenUPLabels = []  # 电梯显示屏上行标签
        self.screenDWLabels = []  # 电梯显示屏下行标签
        self.screenLevelLabels = []  # 电梯显示屏楼层标签

        self.doors = []  # 门背景
        self.fonts = []  # 门面
        self.doorAnims = []  # 门动画


    def setupUI(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1600, 850)
        MainWindow.setStyleSheet("background-color:rgb(255, 255, 255)")

        # 绘制外部控制按钮
        # 绘制每层楼上下行标签
        # xpos[0]：1-10楼； xpos[1]：11-20楼；xpos[2]：
        xpos = [70, 90, 130]

        # 画1-10楼的楼层标签和上下行按钮
        for i in range(LEVEL_NUMS//2):
            # 楼层标签
            l = QtWidgets.QLabel(MainWindow)
            l.setGeometry(QtCore.QRect(xpos[0]+150*i, 710, 40, 40))
            l.setObjectName("LEVEL_{}".format(i))
            self.levelCmdLabels.append(l)

            # 上行按钮
            up = QtWidgets.QPushButton(MainWindow)
            up.setObjectName("LEVELUP_{}".format(i))
            up.setStyleSheet("border-image:url(resources/btn/up_btn_normal.png)")
            up.setGeometry(QtCore.QRect(xpos[1]+150*i, 710, 40, 40))
            up.clicked.connect(self.externClick)
            self.levelCmdButtons.append(up)

            # 下行按钮
            dw = QtWidgets.QPushButton(MainWindow)
            dw.setObjectName("LEVELDOWN_{}".format(i))
            dw.setStyleSheet("border-image:url(resources/btn/down_btn_normal.png)")
            dw.setGeometry(QtCore.QRect(xpos[2] + 150 * i, 710, 40, 40))
            dw.clicked.connect(self.externClick)
            self.levelCmdButtons.append(dw)

        # 画11-20楼的楼层标签和上下行按钮
        for i in range(LEVEL_NUMS//2, LEVEL_NUMS):
            # 楼层标签
            l = QtWidgets.QLabel(MainWindow)
            l.setGeometry(QtCore.QRect(xpos[0] + 150 * (i-LEVEL_NUMS//2), 750, 40, 40))
            l.setObjectName("LEVEL_{}".format(i))
            self.levelCmdLabels.append(l)

            # 上行按钮
            up = QtWidgets.QPushButton(MainWindow)
            up.setObjectName("LEVELUP_{}".format(i))
            up.setStyleSheet("border-image:url(resources/btn/up_btn_normal.png)")
            up.setGeometry(QtCore.QRect(xpos[1] + 150 * (i-LEVEL_NUMS//2), 750, 40, 40))
            up.clicked.connect(self.externClick)
            self.levelCmdButtons.append(up)

            # 下行按钮
            dw = QtWidgets.QPushButton(MainWindow)
            dw.setObjectName("LEVELDOWN_{}".format(i))
            dw.setStyleSheet("border-image:url(resources/btn/down_btn_normal.png)")
            dw.setGeometry(QtCore.QRect(xpos[2] + 150*(i-LEVEL_NUMS//2), 750, 40, 40))
            dw.clicked.connect(self.externClick)
            self.levelCmdButtons.append(dw)

        self.levelCmdButtons[1].setEnabled(False)  # 1楼下行禁用
        self.levelCmdButtons[2*19].setEnabled(False)  # 20楼上行禁用

        # 绘制墙
        walls_pos = [40, 340, 640, 940, 1240, 1540]
        for i in range(WALL_NUMS):
            self.walls.append(QtWidgets.QGraphicsView(MainWindow))
            self.walls[i].setGeometry(QtCore.QRect(walls_pos[i], 40, 10, 610))
            self.walls[i].setStyleSheet("background-color:rgb(100, 100, 100)")
            self.walls[i].setObjectName("WALL_{}".format(i))

        # 电梯文字模型
        font = QtGui.QFont()
        font.setFamily("AcadEref")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)

        # 绘制每个电梯内部楼层按钮
        xpos = [260, 560, 860, 1160, 1460]  # 每个xpos相当于每一部电梯的位置
        #  绘制每个电梯的按钮
        for i in range(ELEV_NUMS):
            bs = []
            # 绘制0-10层
            for j in range(LEVEL_NUMS//2):
                b = QtWidgets.QPushButton(MainWindow)
                b.setGeometry(QtCore.QRect(xpos[i], 200+40*j, 30, 30))
                b.setObjectName("LEVEL_{}_{}".format(i, j))
                b.setStyleSheet("font: 10pt \"AcadEref\";\n"
                                        "background-color: rgb(225, 225, 225);")
                b.clicked.connect(MainWindow.floorClick)  # 绑定内调度函数
                bs.append(b)
            # 绘制11-20层
            for j in range(LEVEL_NUMS//2, LEVEL_NUMS):
                b = QtWidgets.QPushButton(MainWindow)
                b.setGeometry(QtCore.QRect(xpos[i]+40, 200 + 40 * (j-LEVEL_NUMS//2), 30, 30))
                b.setObjectName("LEVEL_{}_{}".format(i, j))
                b.setStyleSheet("font: 10pt \"AcadEref\";\n"
                                        "background-color: rgb(225, 225, 225);")
                b.clicked.connect(MainWindow.floorClick)  # 绑定内调度函数
                bs.append(b)
            self.inLevelButtons.append(bs)

        # 绘制每个电梯内部开关门按钮
        xpos = [90, 390, 690, 990, 1290]
        for i in range(ELEV_NUMS):
            b = QtWidgets.QPushButton(MainWindow)
            b.setGeometry(QtCore.QRect(xpos[i], 550, 40, 40))
            b.setObjectName("OPEN_{}".format(i))
            b.clicked.connect(MainWindow.doorClick)
            b.setStyleSheet("QPushButton{border-image: url(resources/btn/open_n.png)}"
                "QPushButton:hover{border-image: url(resources/btn/open_hover.png)}"
                "QPushButton:pressed{border-image: url(resources/btn/open_pressed.png)}")
            self.openButtons.append(b)

            b = QtWidgets.QPushButton(MainWindow)
            b.setGeometry(QtCore.QRect(xpos[i]+60, 550, 40, 40))
            b.setObjectName("CLOSE_{}".format(i))
            b.clicked.connect(MainWindow.doorClick)  # 绑定门控制函数
            b.setStyleSheet("QPushButton{border-image: url(resources/btn/close_n.png)}"
                            "QPushButton:hover{border-image: url(resources/btn/close_hover.png)}"
                            "QPushButton:pressed{border-image: url(resources/btn/close_pressed.png)}")
            self.closeButtons.append(b)

        # 绘制每个电梯每部报警按钮
        xpos = [120, 420, 720, 1020, 1320]
        for i in range(ELEV_NUMS):
            wbutton = QtWidgets.QPushButton(MainWindow)
            wbutton.setGeometry(QtCore.QRect(xpos[i], 480, 40, 40))
            wbutton.setObjectName("WARN_{}".format(i))
            wbutton.setStyleSheet("border-image:url(resources/warn/warn.png)")
            wbutton.clicked.connect(MainWindow.warnClick)
            self.warnButtons.append(wbutton)

        # 绘制每个电梯显示屏信息标签
        xpos = [130, 430, 730, 1030, 1330]
        for i in range(ELEV_NUMS):
            #  上升标签
            label = QtWidgets.QLabel(MainWindow)
            label.setGeometry(QtCore.QRect(xpos[i], 120, 41, 51))
            label.setObjectName("S_UP_{}".format(i))
            label.setStyleSheet("border-image:url(resources/screen/up_2.png)")
            self.screenUPLabels.append(label)
            #  显示
            lcd = QtWidgets.QLCDNumber(MainWindow)
            lcd.setGeometry(QtCore.QRect(xpos[i]+45, 120, 41, 51))
            lcd.setDigitCount(2)
            lcd.setProperty("value", 1.0)  # 设置初始楼层为1层
            lcd.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
            lcd.setObjectName("S_LEVEL_{}".format(i))
            self.screenLevelLabels.append(lcd)
            #  下降标签
            label = QtWidgets.QLabel(MainWindow)
            label.setGeometry(QtCore.QRect(xpos[i]+90, 120, 41, 51))
            label.setObjectName("S_DOWN_{}".format(i))
            label.setStyleSheet("border-image:url(resources/screen/down_2.png)")
            self.screenDWLabels.append(label)

        # 绘制每个门的背景和门面,动画
        xpos = [90, 390, 690, 990, 1290]
        for i in range(ELEV_NUMS):
            #  电梯开门后的颜色
            door = QtWidgets.QGraphicsView(MainWindow)
            door.setGeometry(QtCore.QRect(xpos[i], 300, 100, 161))
            door.setStyleSheet("background-color: rgb(0, 0, 0)")
            door.setObjectName("DOOR_{}".format(i))
            self.doors.append(door)
            #  电梯开门动画
            font_1 = QtWidgets.QGraphicsView(MainWindow)
            font_1.setGeometry(QtCore.QRect(xpos[i], 300, 50, 161))
            font_1.setStyleSheet("background-color:rgb(110, 110, 107)")
            self.fonts.append(font_1)
            self.doorAnims.append(QtCore.QPropertyAnimation(self.fonts[2*i], b"geometry"))
            self.doorAnims[2*i].setDuration(700)  # 设定动画时间
            self.doorAnims[2*i].setStartValue(QtCore.QRect(xpos[i], 300, 50, 161))  # 设置起始大小
            self.doorAnims[2*i].setEndValue(QtCore.QRect(xpos[i], 300, 8, 161))  # 设置终止大小
            #  另一扇门
            font_2 = QtWidgets.QGraphicsView(MainWindow)
            font_2.setGeometry(QtCore.QRect(xpos[i]+50, 300, 50, 161))
            font_2.setStyleSheet("background-color:rgb(110, 110, 107)")
            self.fonts.append(font_2)
            self.doorAnims.append(QtCore.QPropertyAnimation(self.fonts[2 * i+1], b"geometry"))
            self.doorAnims[2*i+1].setDuration(700)  # 设定动画时间
            self.doorAnims[2*i+1].setStartValue(QtCore.QRect(xpos[i]+50, 300, 50, 161))  # 设置起始大小
            self.doorAnims[2*i+1].setEndValue(QtCore.QRect(xpos[i]+50+42, 300, 8, 161))  # 设置终止大小

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    #  绘制文字
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

        # 设置电梯内部楼层按钮标号
        for i in range(ELEV_NUMS):
            for j in range(LEVEL_NUMS):
                self.inLevelButtons[i][j].setText(_translate("MainWindow", str(j+1)))

        # 设置楼层标签
        for i in range(LEVEL_NUMS):
            self.levelCmdLabels[i].setText(_translate("MainWindow", str(i+1)))


    # 门按钮按下
    def doorClick(self):
        objectName = self.sender().objectName()
        elevNo = int(objectName[-1])
        cmd = OPEN_DOOR if objectName[0] == 'O' else CLOSE_DOOR  # 0 开门    1 关门
        print("{0}号电梯, 命令是{1}".format(elevNo, cmd))

        self._ctrl.doorCtrl(elevNo, cmd)  # 调用命令，门控制，elevNo电梯号，cmd命令号

    # 上下行按下 LEVELUP_{} LEVELDOWN_{}
    def externClick(self):
        objectName = self.sender().objectName()
        print(objectName)
        cmd = GO_UP if objectName.split('_')[0] == "LEVELUP" else GO_DOWN
        levelNo = int(objectName.split('_')[1])
        print("{}楼层发出{}命令".format(levelNo, cmd))  # levelNo楼层号，cmd命令号
        # 楼层按钮亮
        if cmd == GO_UP:
            self.levelCmdButtons[2*levelNo].setStyleSheet("border-image:url(resources/btn/up_btn_pressed.png)")
        else:
            self.levelCmdButtons[2*levelNo+1].setStyleSheet("border-image:url(resources/btn/down_btn_pressed.png)")
        self._ctrl.externalCtrl(levelNo, cmd)  # 调用命令，外部控制

    # 报警按钮点击
    def warnClick(self):
        objectName = self.sender().objectName()
        elevNo = objectName[-1]
        self._ctrl.warnCtrl(int(elevNo))  # 调用命令，警报控制

    # 内调度函数 LEVEL_{}_{}
    def floorClick(self):
        whichButton = self.sender()
        objectName = self.sender().objectName()
        x = objectName.split('_')
        elevNo, target = x[1], x[2]

        print("电梯{}内部点击{}".format(elevNo, target))
        whichButton.setEnabled(False)  # 设置该按钮无法点击
        whichButton.setStyleSheet("font: 10pt \"AcadEref\";\n"
                                        "background-color: rgb(255, 255, 0);")
        self._ctrl.innerCtrl(int(elevNo), int(target))  # 调用命令，内部控制


